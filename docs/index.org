#+hugo_base_dir: ..

#+options: creator:t author:nil

* DONE Homepage
  CLOSED: [2020-07-30 四 15:23]
  :PROPERTIES:
  :EXPORT_HUGO_MENU: :menu main
  :EXPORT_HUGO_SECTION: /
  :EXPORT_HUGO_TYPE: homepage
  :EXPORT_FILE_NAME: _index
  :END:

  *Hi, there👋*
  
  *Eorg* is a /rich-text/ editor based on [[https://draftjs.org/][Draft.js]] , inspired by Emacs org-mode
, and it is used to convert ~.rtx~ to ~.tex~

  *Try it...*

  打算开发一个富文本编辑器 Eorg （暂时就这样称呼吧），查了一下 Wikipedia，用 
~contentEditable~ 的比较多，但是 MDN 指出 ~.execCommand~ 已经过时了，所以就选了 [[https://draftjs.org/][Draft.js]]
框架实现

* DONE Similar Tools
  CLOSED: [2020-07-30 四 16:43]
  :PROPERTIES:
  :EXPORT_HUGO_SECTION: post
  :EXPORT_HUGO_MENU: :menu main
  :EXPORT_FILE_NAME: tool
  :END:

|        | Overleaf rich-text mode | AucTeX ~preview-latex~ |
|--------+-------------------------+------------------------|
| *PROS* |                         |                        |
| *CONS* | not open source, bugs   | rely on Emacs          |

* TODO WorkFlow
  :PROPERTIES:
  :EXPORT_HUGO_SECTION: post
  :EXPORT_HUGO_MENU: :menu implementation
  :EXPORT_FILE_NAME: workflow
  :END:

My folder structure:

#+begin_src bash
  .
  ├── Eorg
  └── blog
      ├── deploy.sh
      └── docs
	  └── post.org
#+end_src

*** blog

- edit ~post.org~
- ~./deploy.sh "deploy message"~
- ~git add .~
- ~git reset public themes~
- ~git commit -m "some messages"~
- ~git push origin master~

*** Eorg
- update ~Eorg~ project

* DONE Architecture
  CLOSED: [2020-07-30 四 16:52]
  :PROPERTIES:
  :EXPORT_FILE_NAME: architecture
  :EXPORT_HUGO_SECTION: post
  :EXPORT_HUGO_MENU: :menu implementation
  :END:
  ![[file:https://i.imgur.com/0zpyyCo.png][Eorg v4]]
* DONE About Me
  CLOSED: [2020-07-30 四 18:29] CLOSED: <2020-04-01 三 01:03>
  :PROPERTIES:
  :EXPORT_HUGO_SECTION: /
  :EXPORT_FILE_NAME: about
  :EXPORT_HUGO_BUNDLE: /
  :EXPORT_HUGO_MENU: :menu main
  :END:
比较 geek，文档只看官方的，比如 MDN，javascript.info，绝大多数开发问题都可以
通过官方文档解决，github issue，stackoverflow 也是经常解决问题的工具

运气好

*TL;DR*

2017 年开始折腾博客，用 Hexo 搭的，基本什么都没写，后来换 Hugo，托管在 ~coding.net~
，啥都没写，这个博客是今年 3 月份搭的，之前用 github.io 访问，经大佬指点，绑定了域名，之前用了两年的阿里云 ~.top~
域名过期
未续费，所以在 [[https://www.namecheap.com/support/knowledgebase/article.aspx/9645/2208/how-do-i-link-my-domain-to-github-pages][namecheap]] 注册了 ~.me~ 新域名，托管在 github page，而且其与 
/[[https://letsencrypt.org/][Let's Encrypt]]/ 有合作，自动 https 绿锁，
/Everything goes smoothly/ .

用 ox-hugo 写博客有一点不方便就是不支持 org-mode 的 [[https://github.com/kaushalmodi/ox-hugo/issues/162][codeRef]] ，希望
作者早点完成这个 feature 吧！

*看起来生活挺枯燥乏味的。。。*

* DONE TypeScript
  CLOSED: <2020-07-30 四 18:44> CLOSED: <2020-04-05 日 01:04>
  :PROPERTIES:
  :EXPORT_HUGO_SECTION: post
  :EXPORT_FILE_NAME: code_review
  :EXPORT_HUGO_MENU: :menu other
  :END:
** PropTypes 转换
 PropTypes 是 React 对 ~prop~ 的一种类型检查机制，但从 v15.5 开始，官方已经
 用 ~prop-types~ 库替代了 ~React.PropTypes~ ，在 TypeScript 项目中使用
 JavaScript 库时需要下载声明文件 ~*.d.ts~ ，即下载对应的 ~@types/prop-types~ ，
 用法如下

 | React              | + TypeScript      |
 |--------------------+-------------------|
 | ~PropTypes.bool~   | ~boolean~         |
 | ~PropTypes.func~   | ~() => void~      |
 | ~PropTypes.number~ | ~number~          |
 | ~PropTypes.object~ | ~{}~              |
 | ~PropTypes.string~ | ~string~          |
 | ~PropTypes.node~   | ~React.ReactNode~ |
 | ~PropTypes.any~    | ~any~             |

 另外，强制类型检查方式也不一样，举个例子，前者用 
 ~isTrue: PropTypes.bool.isRequired~ 和 ~name: PropTypes.string~ ，后者
 用 ~isTrue: boolean~ ， ~name?:stirng~ 

 前面都是比较简单的，如果遇到复杂一点的呢，比如原项目中有如下 ~shape~ 定义：
 #+begin_src js
   export default PropTypes.arrayOf(
       PropTypes.oneOfType([
	   fooShape,
	   PropTypes.shape({
	       a: PropTypes.any.isRequired,
	       b: PropTypes.arrayOf(fooShape).isRequired,
	   }),
       ]),
   );
 #+end_src
 如何把它转化为 TypeScript 定义呢，我的解决方式结合 ~interface~ 和 ~type~ ：
 #+begin_src js
   interface BarShape {
       a: any,
       b: FooShape[]
   }

   export default type X = Array<FooShape | BarShape>;
 #+end_src

 以上内容有参考 stackoverflow，后来发现 [[https://github.com/microsoft/TypeScript/blob/master/doc/spec.md][TS spec]] 都已经写得很清楚了。
 当然，也并不是所有的 JavaScript 库都需要单独下载 ~.d.ts~ 文件，比如该项目中用到的[[https://github.com/ai/nanoid/issues/204#issuecomment-606189297][~nanoid~]]，
 作者已经提前写好了
** enum
 有如下代码片段：

 #+begin_src js :hl_lines 10,15
   const ALIGNMENTS = {
       MIDDLE: 'middle',
       TOP: 'top',
   };

   ...
    
   class DualListBox extends React.Component {
       static propTypes = {
	   alignActions: PropTypes.oneOf([ALIGNMENTS.MIDDLE, ALIGNMENT.TOP]),
	   ...
       };

       static defaultProps = {
	   alignActions: ALIGNMENTS.MIDDLE,
	   ...
       };

       render() {
	   return ();
       };
   };
 #+end_src

这里 ALIGNMENTS 既可以用做类型检查又可以赋值给变量，但是在 TS 中 ~const~ 的方法，
只能起一种作用，所以我采用了 ~enum~ 解决上述问题：

 #+begin_src js
   enum ALIGNMENTS {
       MIDDLE = 'middle',
       TOP = 'top',
   }
 #+end_src

** FontAwesome
原生，用 ~@types~ 过于繁琐了
** CDN 
   React 和 React DOM
